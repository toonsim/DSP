% Exercise session 4: DMT-OFDM transmission scheme
%% parameters
load('IRest.mat');
dim_h = length(h);
N_q = 4;
cycle_prefix_length = dim_h*2;
P = 100;
sig_to_noise = inf;
%% Convert BMP image to bitstream
[bitStream, imageData, colorMap, imageSize, bitsPerPixel] = imagetobitstream('image.bmp');

%% QAM modulation
qamStream = qam_mod(bitStream,N_q,false);

%% OFDM modulation
ofdmStream = ofdm_mod(qamStream,cycle_prefix_length,P);

%% Channel
stream_with_noise = awgn(ofdmStream,sig_to_noise);

%% Convolute with transferfunction
%h = [1;zeros(49,1)];
rxOfdmStream = fftfilt(h,stream_with_noise);


%% OFDM demodulation
fresp = fft(h,length(rxOfdmStream)-no);
freqresp = abs(fresp(1:floor(end/2),1));
ivfreqresp = freqresp.^(-1);
no_rows = size(qamStream,1)/P; % Necessary for OFDM Receiving
rxQamStream = ofdm_demod_eq(rxOfdmStream,P,no_rows,cycle_prefix_length,ivfreqresp);

%% QAM demodulation
rxBitStream = qam_demod(rxQamStream,N_q);

%% Compute BER
% berTransmission = ber(bitStream,rxBitStream);

%% Construct image from bitstream
imageRx = bitstreamtoimage(rxBitStream, imageSize, bitsPerPixel);

%% Plot images
subplot(2,1,1); colormap(colorMap); image(imageData); axis image; title('Original image'); drawnow;
subplot(2,1,2); colormap(colorMap); image(imageRx); axis image; title(['Received image']); drawnow;
